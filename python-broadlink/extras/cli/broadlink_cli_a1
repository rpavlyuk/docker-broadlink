#!/usr/bin/env python3

import broadlink
import sys
import argparse
import time
import socket
import traceback

### Main routine
def main(args, type=0x2714):

    # defaults
    retries_count = 3 # try N times before risinng an error

    # args
    host = args.host
    mac = bytearray.fromhex(args.mac)

    dev = broadlink.gendevice(type, (host, 80), mac)

    # LEt's try to initiate the Device
    i = 0
    is_timeout = 0
    while (i<retries_count):
      i+=1
      try:
        dev.auth()
        is_timeout = 0
        break
      except socket.timeout as err:
        # do nothing, one more loop
        is_timeout = 1
        continue
      except:
        print("Device authorization failed", file=sys.stderr)
        print(sys.exc_info(), file=sys.stderr)
        traceback.print_exc(file=sys.stderr)

    # Okay, probably there was a timeout after 3 tries ...
    if is_timeout:
      raise Exception("Got socket timeout after {} retries".format(retries_count))

    # Read the sensors
    if args.raw:
        data = dev.check_sensors_raw()
    else:
        data = dev.check_sensors()

    if args.key is not None:
        print (data[args.key])
    else:
        for k in data:
            print ("{} {}".format(k, data[k]))


# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@');
    parser.add_argument("--mac", help="mac address (hex reverse), as used by python-broadlink library", required=True)
    parser.add_argument("--host", help="device IP address", required=True)
    parser.add_argument("--key", help="data key")
    parser.add_argument("--raw", help="provide raw output", action="store_true")
    args = parser.parse_args()

    main(args)
